#include <EmonLib.h>
#include <WiFi.h>
#include <PubSubClient.h>

EnergyMonitor emon1;

// Configurações da rede Wi-Fi
const char* ssid = "Wesley";
const char* password = "123456789";

// Endereço IP do broker MQTT
const char* mqtt_server = "192.168.24.30";

// Cliente Wi-Fi e cliente MQTT
WiFiClient leitorCorrente;
PubSubClient client(leitorCorrente);

// Controle de tempo para envio de dados
unsigned long lastSend = 0;
const long intervalo = 1000; // intervalo em milissegundos

// Energia acumulada em kWh
double energiaAcumulada = 0;

void setup_wifi() {
  Serial.print("Conectando a ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("\nWiFi conectado");
  Serial.print("Endereço IP: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensagem recebida [");
  Serial.print(topic);
  Serial.print("]: ");
  for (unsigned int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conexão MQTT...");
    String clientId = "ESP32Client-";
    clientId += String(random(0xffff), HEX);
    if (client.connect(clientId.c_str())) {
      Serial.println("Conectado ao MQTT");
      client.subscribe("inTopic");
    } else {
      Serial.print("Falhou, rc=");
      Serial.print(client.state());
      Serial.println("; tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void setup() {
  Serial.begin(115200);
  emon1.current(32,4.3); // Ajuste o fator de calibração conforme necessário
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  if (millis() - lastSend > intervalo) {
    double Irms = emon1.calcIrms(1480);
    double Vrms = 125.0; // Tensão assumida da rede
    double potenciaAparente = Vrms * Irms; // VA

    // Estimativa com fator de potência típico (varia conforme o aparelho)
    double fatorPotenciaEstimado = 0.8;
    double potenciaAtiva = potenciaAparente * fatorPotenciaEstimado; // W

    // Energia consumida acumulada em kWh
    energiaAcumulada += (potenciaAtiva * (intervalo / 1000.0)) / 3600000.0; // intervalo em ms

    // Mostrar no monitor serial
    Serial.print("Corrente (Irms): ");
    Serial.print(Irms);
    Serial.println(" A");

    Serial.print("Tensão (Vrms): ");
    Serial.print(Vrms);
    Serial.println(" V");

    Serial.print("Potência aparente: ");
    Serial.print(potenciaAparente);
    Serial.println(" VA");

    Serial.print("Potência ativa (estimada): ");
    Serial.print(potenciaAtiva);
    Serial.println(" W");

    Serial.print("Fator de potência (estimado): ");
    Serial.println(fatorPotenciaEstimado);

    Serial.print("Energia acumulada: ");
    Serial.print(energiaAcumulada, 6);
    Serial.println(" kWh");

    // Publicar apenas a corrente, ou adicione mais se quiser
    client.publish("leitorCorrente", String(Irms).c_str());

    lastSend = millis();
  }
}
